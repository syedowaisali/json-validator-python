{
  "rules": {
    "invalid_key": "(bold)(blue){path}(end) is not a valid key.",
    "invalid_sibling_key": "this (bold)(red){invalid_key}(end) key can't be used when binding is enabled at (bold)(blue){schema_path}(end) in schema.",
    "__required__": {
      "missing_message": "(bold)(blue){source}(end) key is missing in (bold){target}(end)",
      "at_least_one_message": "(bold)(blue){source}(end) should have at least one (bold)object(end)."
    },
    "__data_type__": {
      "invalid": "in schema (bold)(blue){source}(end) has invalid data type (bold)(red){datatype}(end). See the available data-types here https://github.com/syedowaisali/json-validator-python?tab=readme-ov-file#data-types",
      "not_match": "(bold)(blue){source}(end) expect {valid_data_type} data type, but found (bold)(red){target_data_type}(end)."
    },
    "__binder__": {
      "not_found": "(bold)(blue)__binder__(end) object not found in schema. see https://github.com/syedowaisali/json-validator-python?tab=readme-ov-file#available-keywords for more detail.",
      "missing": "(bold)(red){binding}(end) key is not found in (bold)__binder__(end) object."
    }
  },
  "r": [
    "1. those keys that are defined in target document but not defined in source document will be considered are invalid key until deliberately disable checking or the key marked as __bind__."
  ]
}